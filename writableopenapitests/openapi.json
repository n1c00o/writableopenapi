{
  "components": {
    "callbacks": {
      "callback": {
        "/pet/findByStatus": {
          "get": {
            "operationId": "findPetsByStatus",
            "parameters": [
              {
                "description": "Status values that need to be considered for filter",
                "in": "query",
                "name": "status",
                "required": true,
                "schema": {
                  "default": "available",
                  "enum": [
                    "available",
                    "pending",
                    "sold"
                  ],
                  "nullable": false,
                  "type": "string"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "successful operation"
              }
            }
          },
          "post": {
            "operationId": "updatePetWithForm",
            "parameters": [
              {
                "description": "ID of pet that needs to be updated",
                "in": "path",
                "name": "petId",
                "required": true,
                "schema": {
                  "maxLength": 100,
                  "minLength": 1,
                  "type": "string"
                }
              }
            ],
            "responses": {
              "405": {
                "description": "Invalid input"
              }
            }
          }
        },
        "x-foo": "bar"
      }
    },
    "examples": {
      "example": {
        "description": "This is an example of a pet",
        "summary": "An example of a pet",
        "value": "{'id': 0, 'category': {'id': 0, 'name': 'string'}, 'name': 'doggie', 'photoUrls': ['string'], 'tags': [{'id': 0, 'name': 'string'}], 'status': 'available'}",
        "x-foo": "bar"
      }
    },
    "headers": {
      "header": {
        "allowEmptyValue": true,
        "allowReserved": true,
        "deprecated": true,
        "description": "The number of allowed requests in the current period",
        "example": "42",
        "examples": {
          "example1": {
            "description": "This is an example of a header",
            "summary": "An example of a header",
            "value": "42",
            "x-foo": "bar"
          }
        },
        "explode": false,
        "required": true,
        "schema": {},
        "style": "simple",
        "x-foo": "bar"
      }
    },
    "links": {
      "link": {
        "description": "A link to the callback",
        "operationRef": "#/components/operations/putPet",
        "parameters": {
          "petId": "value1",
          "status": "value2"
        },
        "requestBody": "value3"
      }
    },
    "parameters": {
      "parameter": {
        "allowEmptyValue": true,
        "allowReserved": true,
        "deprecated": true,
        "description": "ID of pet to return",
        "explode": false,
        "in": "path",
        "name": "petId",
        "required": true,
        "schema": {
          "format": "uuid",
          "maxLength": 36,
          "minLength": 36,
          "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
          "type": "string"
        },
        "style": "simple"
      }
    },
    "requestBodies": {
      "request_body": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/schema"
            }
          }
        },
        "description": "user to add to the system",
        "required": true
      }
    },
    "responses": {
      "response": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/schema"
              },
              "maxItems": 100,
              "minItems": 1,
              "type": "array"
            }
          }
        },
        "description": "A complex object array response",
        "headers": {
          "X-Rate-Limit-Limit": {
            "$ref": "#/components/headers/header"
          },
          "X-Rate-Limit-Remaining": {
            "$ref": "#/components/headers/header"
          },
          "X-Rate-Limit-Reset": {
            "allowEmptyValue": true,
            "allowReserved": true,
            "deprecated": true,
            "description": "The number of allowed requests in the current period",
            "explode": false,
            "required": true,
            "schema": {},
            "style": "simple"
          }
        }
      }
    },
    "schemas": {
      "schema": {
        "properties": {
          "id": {
            "format": "uuid",
            "maxLength": 36,
            "minLength": 36,
            "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "security_scheme": {
        "bearerFormat": "JWT",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "http://example.com/api/oauth/dialog",
            "refreshUrl": "http://example.com/api/oauth/token",
            "scopes": {
              "read:pets": "read your pets",
              "write:pets": "modify pets in your account"
            }
          },
          "clientCredentials": {
            "authorizationUrl": "http://example.com/api/oauth/dialog",
            "refreshUrl": "http://example.com/api/oauth/token",
            "scopes": {
              "read:pets": "read your pets",
              "write:pets": "modify pets in your account"
            }
          },
          "implicit": {
            "authorizationUrl": "http://example.com/api/oauth/dialog",
            "refreshUrl": "http://example.com/api/oauth/token",
            "scopes": {
              "read:pets": "read your pets",
              "write:pets": "modify pets in your account"
            }
          },
          "password": {
            "authorizationUrl": "http://example.com/api/oauth/dialog",
            "refreshUrl": "http://example.com/api/oauth/token",
            "scopes": {
              "read:pets": "read your pets",
              "write:pets": "modify pets in your account"
            }
          }
        },
        "scheme": "basic",
        "type": "http"
      }
    },
    "x-foo": "bar"
  },
  "externalDocs": {
    "description": "Find out more about our store",
    "url": "http://example.com"
  },
  "info": {
    "contact": {
      "name": "API Support",
      "url": "http://www.example.com/support"
    },
    "description": "My API description",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "termsOfService": "http://example.com/terms/",
    "title": "My API",
    "version": "1.0.0"
  },
  "openapi": "3.1.0",
  "paths": {
    "/pets": {
      "delete": {
        "deprecated": false,
        "description": "",
        "operationId": "deletePets",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/response"
          },
          "400": {
            "$ref": "#/components/responses/response"
          }
        },
        "summary": "Deletes all pets",
        "tags": [
          "pets"
        ]
      },
      "head": {
        "deprecated": false,
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "getPets",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/response"
          },
          "400": {
            "$ref": "#/components/responses/response"
          }
        },
        "summary": "Find pets by status",
        "tags": [
          "pets"
        ]
      }
    },
    "/pets/{petId}": {
      "get": {
        "deprecated": true,
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameter"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": true,
            "deprecated": true,
            "description": "Status values that need to be considered for filter",
            "explode": false,
            "in": "query",
            "name": "status",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/response"
          },
          "400": {
            "$ref": "#/components/responses/response"
          },
          "404": {
            "$ref": "#/components/responses/response"
          }
        },
        "summary": "Find pet by ID",
        "tags": [
          "pets"
        ]
      }
    }
  },
  "security": [
    {
      "petstore_auth": [
        "write:pets",
        "read:pets"
      ]
    },
    {
      "api_key": []
    }
  ],
  "servers": [
    {
      "description": "My server",
      "url": "http://petstore.swagger.io/v1",
      "variables": {
        "password": {
          "default": "demo",
          "description": "This value is assigned by the service",
          "enum": [
            "demo",
            "admin"
          ]
        },
        "username": {
          "default": "demo",
          "description": "This value is assigned by the service",
          "enum": [
            "demo",
            "admin"
          ]
        }
      }
    }
  ],
  "tags": [
    {
      "description": "Everything about your Pets",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://example.com"
      },
      "name": "pet",
      "x-foo": "bar"
    },
    {
      "description": "Access to Petstore orders",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://example.com"
      },
      "name": "store",
      "x-foo": "bar"
    }
  ],
  "x-foo": "bar"
}